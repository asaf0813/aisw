/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.46
 * Generated at: 2019-10-08 10:00:43 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class insert_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("\t<head>\r\n");
      out.write("\t\t<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\r\n");
      out.write("\t\t<title>Insert title here</title>\r\n");
      out.write("\t</head>\r\n");
      out.write("\t<body>\r\n");
      out.write("\t\t<div style=\"width:1300px; margin:0 auto\">\r\n");
      out.write("\t\t\t<h1 style=\"text-align:center\">게시물 등록하기</h1>\r\n");
      out.write("\t\t\t<!--\r\n");
      out.write("\t\t\t\tHTTP : Hyper Text Transfer Protocol => 웹 문서를 구성하고 있는 언어인 HTML을 전송하고 전송받기 위한 통신 규칙\r\n");
      out.write("\t\t\t\t\t1. HTTP로 정보 전달시 패킷이라는 형태로 데이터가 전송 됨.\r\n");
      out.write("\t\t\t\t\t2. 패킷의 구조는 크게 '헤더', '바디'로 구성됨.\r\n");
      out.write("\t\t\t\t\t3. URL은 '헤더'쪽에 작성되어 보내짐 \r\n");
      out.write("\t\t\t-->\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\t<!-- form : 폼내에 존재하는 'input type'의 엘리먼트들의 'value'를 'action'의 'url'로 이동할 때, 파라미터로 만들어줌(매핑시켜줌) => 'name':키, 'value':값 -->\r\n");
      out.write("\t\t\t<!-- \r\n");
      out.write("\t\t\t\t method: 데이터를 보내는 방식 (GET, POST) \r\n");
      out.write("\t\t\t\t\tex) title, contents, creater 데이터를 보낼 때\r\n");
      out.write("\t\t\t\t\t\tGET: localhost:8080?title=제목&contents=내용&creater=생성자\r\n");
      out.write("\t\t\t\t\t\t\t=> 주소창을 이용해 데이터를 전달\r\n");
      out.write("\t\t\t\t\t\t\t=> 브라우저의 기준에 따라서 GET방식의 글자수 제한\r\n");
      out.write("\t\t\t\t\t\t\t=> 데이터가 URL에 작성되어져 있으므로 => HTTP패킷의 '해더'에 포함되여 서버에 요청\r\n");
      out.write("\t\t\t\t\t\tPOST: localhost:8080\r\n");
      out.write("\t\t\t\t\t\t\t=> GET방식 보다 데이터를 보낼 수 있는 양은 더 큼\r\n");
      out.write("\t\t\t\t\t\t\t=> 데이터가 URL에 노출되지 않음\r\n");
      out.write("\t\t\t\t\t\t\t=> 데이터는 HTTP패킷의 '바디'에 포함되어 서버에 요청\r\n");
      out.write("\t\t\t-->\r\n");
      out.write("\t\t\t<form action=\"/insert_excute\" method=\"get\" name=\"form\">\r\n");
      out.write("\t\t\t\t<!-- 테이블 -->\r\n");
      out.write("\t\t\t\t<table BORDERCOLOR=\"#000000\" border=\"1\" cellspacing=\"0\" style=\"width:100%\">\r\n");
      out.write("\t\t\t\t\t<tr> \r\n");
      out.write("\t\t\t\t\t\t<th width=\"15%\" height=\"30\" nowrap >제목</th>\r\n");
      out.write("\t\t\t\t\t\t<td width=\"85%\"><input type=\"text\" name=\"title\" style=\"width:100%\"/></td>\r\n");
      out.write("\t\t\t\t\t</tr>\r\n");
      out.write("\t\t\t\t\t<tr>\r\n");
      out.write("\t\t\t\t\t\t<th width=\"15%\" height=\"30\" nowrap >등록자</th>\r\n");
      out.write("\t\t\t\t\t\t<td width=\"85%\"><input type=\"text\" name=\"creater\" style=\"width:100%\"/></td>\r\n");
      out.write("\t\t\t\t\t</tr> \r\n");
      out.write("\t\t\t\t\t<tr> \r\n");
      out.write("\t\t\t\t\t\t<th height=\"320\">내용</th>\r\n");
      out.write("\t\t\t\t\t\t<td width=\"85%\">\r\n");
      out.write("\t\t\t\t\t\t\t<textarea name=\"contents\" title=\"내용\" class=\"textarea\" cols=\"77\" rows=\"20\" style=\"width:100%\"></textarea>\r\n");
      out.write("\t\t\t\t\t\t</td>\r\n");
      out.write("\t\t\t\t\t</tr>\r\n");
      out.write("\t\t\t\t</table>\r\n");
      out.write("\t\t\t\t<!-- //테이블 -->\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\t\t<br/><br/>\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\t<!-- button 그룹 -->\r\n");
      out.write("\t\t\t\t<div>\r\n");
      out.write("\t\t\t\t\t<span style=\"float:left\">\r\n");
      out.write("\t\t\t\t\t\t<button type=\"button\" onclick=\"window.location.href='/list'\">목록</button>\r\n");
      out.write("\t\t\t\t\t</span>\r\n");
      out.write("\t\t\t\t\t<span style=\"float:right\">\r\n");
      out.write("\t\t\t\t\t\t<!-- <button type=\"button\" onclick=\"goInsertExcute()\">유효성 검사 후 등록</button> -->\r\n");
      out.write("\t\t\t\t\t\t<button type=\"submit\">등록</button><!-- 'type'이 submit일 때만 'form'에 있는 'action'속성의 'url'로 페이지 이동을 함 -->&nbsp;&nbsp;\r\n");
      out.write("\t\t\t\t\t\t<button type=\"button\" onclick=\"window.location.href='/list'\">취소</button>\r\n");
      out.write("\t\t\t\t\t</span>\r\n");
      out.write("\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t<!-- //button 그룹 -->\r\n");
      out.write("\t\t\t</form>\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t</body>\r\n");
      out.write("\t\r\n");
      out.write("\t<script>\r\n");
      out.write("\t\tfunction validationCheck () {\r\n");
      out.write("\t\t\tvar title = document.form.title;\r\n");
      out.write("\t\t\tvar contents = document.form.contents;\r\n");
      out.write("\t\t\tvar creater = document.form.creater;\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\tif (title.value == \"\") {\r\n");
      out.write("\t\t\t\talert(\"제목을 입력해주세요.\")\r\n");
      out.write("\t\t\t\ttitle.focus();\r\n");
      out.write("\t\t\t\treturn false;\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\tif (contents.value == \"\") {\r\n");
      out.write("\t\t\t\talert(\"내용을 입력해주세요.\")\r\n");
      out.write("\t\t\t\tcontents.focus();\r\n");
      out.write("\t\t\t\treturn false;\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\tif (creater.value == \"\") {\r\n");
      out.write("\t\t\t\talert(\"등록자를 입력해주세요.\")\r\n");
      out.write("\t\t\t\tcreater.focus();\r\n");
      out.write("\t\t\t\treturn false;\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\treturn true;\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\r\n");
      out.write("\t\tfunction goInsertExcute() {\r\n");
      out.write("\t\t\tif (validationCheck() == true) {\r\n");
      out.write("\t\t\t\tdocument.form.submit();\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t}\r\n");
      out.write("\t</script>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
